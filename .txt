rom typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN: Final = '6211118095:AAFLKKjvQeqns8eyYOz2a6FdNHscwAFAttU'
BOT_USERNAME: Final = '@The_snoopbot'

# Commands
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("update1 = ", update)
    print("context1 = ", context)
    await update.message.reply_text('Hello, nice to meet you, lets get started!')
    
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("HEHE I cant help you.")
    
async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('tingtingdangdangting')
    
# Responses
def handle_response(text: str) -> str:
    text = text.lower()
    
    if 'hello' in text:
        return 'Hey there'
    if 'how are you' in text:
        return 'I am good.'
    if 'i love python' in text:
        return 'Me too! Lets learn that tgt!'
    return 'I dont understand what you wrote...'

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type = update.message.chat.type
    text = update.message.text
    
    print(f"User ({update.message.chat.id}) in {message_type}: {text}")
    
    if message_type == 'group':
        if  BOT_USERNAME in text:
            new_text = text.replace(BOT_USERNAME, '').strip()
            response = handle_response(new_text)
        else: 
            return 
    else:
        response = handle_response(text)
        
    print('Botty: ', response)
    await update.message.reply_text(response)   
    
    
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")
    

if __name__ == '__main__':
    print('Starting bot...')
    app = Application.builder().token(TOKEN).build()
    
    # Commands
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('custom', custom_command))
    
    # Messages
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    
    # Errors
    app.add_error_handler(error)
    
    # Polls the bot
    print("Polling...")
    app.run_polling(poll_interval=3)